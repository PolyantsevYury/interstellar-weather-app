{"version":3,"sources":["img/context_camera.PNG","App.styles.js","theme.js","helpers.js","components/TogglePlanet/TogglePlanet.styles.js","components/TogglePlanet/TogglePlanet.js","components/Weather/MarsWeather/Previous/Previous.styles.js","components/Weather/MarsWeather/Previous/Previous.js","components/Weather/MarsWeather/Unit/Unit.styles.js","components/Weather/MarsWeather/Unit/Unit.js","components/Weather/WeatherData.styles.js","components/Weather/MarsWeather/MarsWeatherData.js","components/Weather/MarsWeather/MarsWeather.js","components/Weather/EarthWeather/EarthWeatherData.js","components/Weather/EarthWeather/EarthWeather.js","App.js","serviceWorker.js","index.js","img/mars.jpg","img/earth.jpg"],"names":["module","exports","GlobalStyle","createGlobalStyle","props","imageUrl","theme","backgroundPosition","AppWrapper","styled","div","WeatherBlock","main","themeColor","marsTheme","earthTheme","formatTemperature","temperature","isMetric","returnTemp","Math","round","ToggleWrapper","TogglePlanet","planet","setPlanet","type","onChange","id","defaultChecked","htmlFor","className","PreviousWrapper","PreviousDays","PreviousDay","Previous","marsWeather","setSelectedSol","marsLoading","grid","gutter","column","dataSource","style","minWidth","renderItem","item","Item","key","sol","bodyStyle","padding","color","border","borderRadius","backgroundColor","date","maxTemp","minTemp","onClick","itemNumber","UnitStyles","Toggle","button","metric","Unit","setMetric","prev","WeatherWrapper","WeatherItem","WeatherInstance","MarsWeatherData","windSpeed","src","currentPhoto","alt","overlayStyle","maxWidth","content","trigger","InfoCircleFilled","fontSize","marginLeft","MarsWeather","selectedSol","EarthWeatherData","earthWeather","temp","humidity","pressure","EarthWeather","fetchEarthData","city","error","Search","Input","onSearch","size","App","useState","setMarsWeather","setMarsLoading","fetchMarsData","a","request","axios","get","response","data","sol_keys","map","solKey","i","AT","mx","mn","HWS","av","Date","First_UTC","toLocaleDateString","undefined","day","month","length","setEarthWeather","setCity","setError","url","name","useEffect","MarsBGImage","EarthBGImage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.49f9e9da.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/context_camera.ad456a3a.PNG\";","import styled, {createGlobalStyle} from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  * {\r\n    box-sizing: border-box;\r\n  }\r\n    \r\n  :root {\r\n    --fw-light: 300;\r\n    --fw-normal: 400;\r\n    --fw-semi: 500;\r\n    --fw-bold: 700;\r\n    --fs-h1: 1.5rem;\r\n    --fs-h2: 2.25rem;\r\n    --fs-body: 1rem;\r\n    --fs-xl: 4.5rem;\r\n  }\r\n\r\n  body {\r\n    background: linear-gradient(rgba(0,0,0,0), rgba(0,0,0,0.4)), url(${props => props.imageUrl});\r\n    background-size: cover;\r\n    background-attachment: fixed;\r\n    background-position: ${({theme}) => theme.backgroundPosition};\r\n  }\r\n  \r\n  .preloadImage {\r\n    display: none;\r\n  }\r\n  \r\n  h1, h2, h3, h4 {\r\n    line-height: 1;\r\n    color: #F4F4F4;\r\n  }\r\n`;\r\n\r\nexport const AppWrapper = styled.div`\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 20px 20px 0 20px;\r\n  color: #F4F4F4;\r\n  margin: 0;\r\n  font-family: 'Montserrat', sans-serif;\r\n  line-height: 1.6;\r\n    \r\n  @media (max-width: 767px) {\r\n    padding: 6px 6px 0 6px;\r\n  }\r\n  \r\n  .content-container {\r\n    flex-grow: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nexport const WeatherBlock = styled.main`\r\n  background: rgba(0, 0, 0, 0.7);\r\n  padding: 20px;\r\n  margin-top: 20px;\r\n  border-radius: 14px;\r\n  border: 1px solid #1E1E1E;\r\n  display: flex;\r\n  width: 100%;\r\n  max-width: 1000px;\r\n  flex-direction: column;\r\n  \r\n  @media (max-width: 767px) {\r\n    margin-top: 6px;\r\n  }\r\n  \r\n  .weather-title {\r\n    align-self: center;\r\n    text-align: center;\r\n    font-size: var(--fs-h1);\r\n    font-weight: var(--fw-semi);\r\n    margin-bottom: 20px;\r\n    color: #CDCDCD;\r\n    }\r\n    \r\n    .weather-title__location {\r\n      color: ${({theme}) => theme.themeColor};\r\n      text-transform: uppercase;\r\n      letter-spacing: 2px;\r\n    }\r\n  }\r\n  \r\n  .weather-date {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    \r\n    h2 {\r\n      margin: 0;\r\n    }\r\n    p {\r\n      color: #ADADAD;\r\n      font-size: 1.1rem;\r\n      margin: 0;\r\n    }\r\n    span {\r\n      font-size: var(--fs-body);\r\n      color: #ADADAD;\r\n    }\r\n  }\r\n  \r\n  .search-container {\r\n    margin: 20px 0 20px 0;\r\n    text-align: center;\r\n  }\r\n  \r\n  .unit-container {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n`;","export const marsTheme = {\r\n  themeColor: '#d06d6d',\r\n  backgroundPosition: '80% 40%',\r\n}\r\n\r\nexport const earthTheme = {\r\n  themeColor: '#78A9E3',\r\n  backgroundPosition: '50% 50%',\r\n}","export const formatDate = (date) =>\r\n  date.toLocaleDateString(undefined, { day: 'numeric', month: 'long' });\r\n\r\nexport const formatTemperature = (temperature, isMetric) => {\r\n  let returnTemp = temperature;\r\n  if (!isMetric) {\r\n    returnTemp = (temperature - 32) * (5 / 9);\r\n  }\r\n  return Math.round(returnTemp);\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const ToggleWrapper = styled.div`\r\n  overflow: hidden;\r\n  padding: 0 70px;\r\n  height: 40px;\r\n      \r\n  input {\r\n    position: absolute;\r\n    left: -99em;\r\n  }\r\n  \r\n  .toggle {\r\n    cursor: pointer;\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 80px;\r\n    height: 40px;\r\n    background-color: rgba(0, 0, 0, 0.6);\r\n    border-radius: 84px;\r\n    transition: background-color 200ms cubic-bezier(0.445, 0.05, 0.55, 0.95);\r\n  }\r\n  .toggle:before {\r\n    content: 'EARTH';\r\n    position: absolute;\r\n    left: -70px;\r\n    top: 5px;\r\n    font-size: 18px;\r\n    color: #fff;\r\n  }\r\n  .toggle:after {\r\n    content: 'MARS';\r\n    position: absolute;\r\n    right: -60px;\r\n    top: 5px;\r\n    font-size: 18px;\r\n    color: #E0E0E0;\r\n  }\r\n  \r\n  .toggle__handler {\r\n    display: inline-block;\r\n    position: relative;\r\n    z-index: 1;\r\n    top: 3px;\r\n    left: 3px;\r\n    width: 34px;\r\n    height: 34px;\r\n    background-color: #83D8FF;\r\n    border-radius: 50px;\r\n    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);\r\n    transition: all 400ms cubic-bezier(0.68, -0.55, 0.265, 1.55);\r\n    transform: rotate(-45deg);\r\n  }\r\n  .toggle__handler .crater {\r\n    position: absolute;\r\n    background-color: #E8CDA5;\r\n    opacity: 0;\r\n    transition: opacity 200ms ease-in-out;\r\n    border-radius: 100%;\r\n  }\r\n  .toggle__handler .crater--1 {\r\n    top: 18px;\r\n    left: 5px;\r\n    width: 4px;\r\n    height: 4px;\r\n  }\r\n  .toggle__handler .crater--2 {\r\n    top: 20px;\r\n    left: 16px;\r\n    width: 6px;\r\n    height: 6px;\r\n  }\r\n  .toggle__handler .crater--3 {\r\n    top: 6px;\r\n    left: 17px;\r\n    width: 8px;\r\n    height: 8px;\r\n  }\r\n  \r\n  .star {\r\n    position: absolute;\r\n    background-color: #ffffff;\r\n    transition: all 300ms cubic-bezier(0.445, 0.05, 0.55, 0.95);\r\n    border-radius: 50%;\r\n  }\r\n  \r\n  .star--1 {\r\n    top: 10px;\r\n    left: 35px;\r\n    z-index: 0;\r\n    width: 30px;\r\n    height: 3px;\r\n  }\r\n  \r\n  .star--2 {\r\n    top: 18px;\r\n    left: 28px;\r\n    z-index: 1;\r\n    width: 30px;\r\n    height: 3px;\r\n  }\r\n  \r\n  .star--3 {\r\n    top: 27px;\r\n    left: 40px;\r\n    z-index: 0;\r\n    width: 30px;\r\n    height: 3px;\r\n  }\r\n  \r\n  .star--4,\r\n  .star--5 {\r\n    opacity: 0;\r\n    transition: all 300ms 0 cubic-bezier(0.445, 0.05, 0.55, 0.95);\r\n  }\r\n  \r\n  .star--4 {\r\n    top: 16px;\r\n    left: 11px;\r\n    z-index: 0;\r\n    width: 2px;\r\n    height: 2px;\r\n    transform: translate3d(3px, 0, 0);\r\n  }\r\n  \r\n  .star--5 {\r\n    top: 32px;\r\n    left: 17px;\r\n    z-index: 0;\r\n    width: 3px;\r\n    height: 3px;\r\n    transform: translate3d(3px, 0, 0);\r\n  }\r\n  \r\n  input:checked + .toggle {\r\n    background-color: rgba(0, 0, 0, 0.6);;\r\n  }\r\n  input:checked + .toggle:before {\r\n    color: #E0E0E0;\r\n  }\r\n  input:checked + .toggle:after {\r\n    color: #ffffff;\r\n  }\r\n  input:checked + .toggle .toggle__handler {\r\n    background-color: #FFE5B5;\r\n    transform: translate3d(40px, 0, 0) rotate(0);\r\n  }\r\n  input:checked + .toggle .toggle__handler .crater {\r\n    opacity: 1;\r\n  }\r\n  input:checked + .toggle .star--1 {\r\n    width: 2px;\r\n    height: 2px;\r\n  }\r\n  input:checked + .toggle .star--2 {\r\n    width: 4px;\r\n    height: 4px;\r\n    transform: translate3d(-5px, 0, 0);\r\n  }\r\n  input:checked + .toggle .star--3 {\r\n    width: 2px;\r\n    height: 2px;\r\n    transform: translate3d(-7px, 0, 0);\r\n  }\r\n  input:checked + .toggle .star--4,\r\n  input:checked + .toggle .star--5 {\r\n    opacity: 1;\r\n    transform: translate3d(0, 0, 0);\r\n  }\r\n  input:checked + .toggle .star--4 {\r\n    transition: all 300ms 200ms cubic-bezier(0.445, 0.05, 0.55, 0.95);\r\n  }\r\n  input:checked + .toggle .star--5 {\r\n    transition: all 300ms 300ms cubic-bezier(0.445, 0.05, 0.55, 0.95);\r\n  }\r\n`;\r\n","import {ToggleWrapper} from \"./TogglePlanet.styles\";\r\nimport React from \"react\";\r\n\r\nexport const TogglePlanet = ({planet, setPlanet}) => {\r\n  return (\r\n    <ToggleWrapper>\r\n      <input type=\"checkbox\"\r\n             onChange={() => setPlanet(planet === 'Mars' ? 'Earth' : 'Mars')}\r\n             id=\"dn\" defaultChecked={(planet === 'Mars')}/>\r\n      <label htmlFor=\"dn\" className=\"toggle\">\r\n        <span className=\"toggle__handler\">\r\n          <span className=\"crater crater--1\"></span>\r\n          <span className=\"crater crater--2\"></span>\r\n          <span className=\"crater crater--3\"></span>\r\n        </span>\r\n        <span className=\"star star--1\"></span>\r\n        <span className=\"star star--2\"></span>\r\n        <span className=\"star star--3\"></span>\r\n        <span className=\"star star--4\"></span>\r\n        <span className=\"star star--5\"></span>\r\n        <span className=\"star star--6\"></span>\r\n      </label>\r\n    </ToggleWrapper>\r\n  )\r\n}","import styled from 'styled-components';\r\n\r\nexport const PreviousWrapper = styled.div`\r\n  width: 100%;\r\n  \r\n  .previous-title {\r\n    color: #fff;\r\n    margin: 20px 40px;\r\n    \r\n    @media (max-width: 767px) {\r\n      margin: 20px 0;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const PreviousDays = styled.div`\r\n  overflow-x: scroll;\r\n  text-align: center;\r\n`;\r\n\r\nexport const PreviousDay = styled.div`\r\n  p {\r\n    margin: 0;\r\n  }\r\n  \r\n  .previous-day__sol {\r\n    margin: 0;\r\n  }\r\n  \r\n  .previous-day__date {\r\n    font-size: 0.9 rem;\r\n    color: #ADADAD;\r\n    margin-bottom: 10px;\r\n  }\r\n  \r\n  .previous-day__temp {\r\n    color: #CDCDCD;\r\n    font-size: 16px;\r\n  }\r\n  \r\n  .previous-day__more-info {\r\n    line-height: 30px;\r\n    height: 30px;\r\n    text-align: center;\r\n    width: 100%;\r\n    cursor: pointer;\r\n    color: #FFF;\r\n    transition: all 0.3s;\r\n    position: relative;\r\n    margin-top: 10px;\r\n    \r\n    span {\r\n      color: #ADADAD;\r\n    }\r\n    \r\n    :before {\r\n      content: '';\r\n      position: absolute;\r\n      bottom: 0;\r\n      left: 0;\r\n      width: 100%;\r\n      height: 100%;\r\n      z-index: 1;\r\n      opacity: 0;\r\n      transition: all 0.3s;\r\n      border-top-width: 1px;\r\n      border-bottom-width: 1px;\r\n      border-top-style: solid;\r\n      border-bottom-style: solid;\r\n      border-top-color: rgba(255,255,255,0.5);\r\n      border-bottom-color: rgba(255,255,255,0.5);\r\n      transform: scale(0.1, 1);\r\n    }\r\n    \r\n    :hover span {\r\n      letter-spacing: 2px;\r\n      color: #fff;\r\n    }\r\n    \r\n    :hover::before {\r\n      opacity: 1; \r\n      transform: scale(1, 1); \r\n    }\r\n    \r\n    ::after {\r\n      content: '';\r\n      position: absolute;\r\n      bottom: 0;\r\n      left: 0;\r\n      width: 100%;\r\n      height: 100%;\r\n      z-index: 1;\r\n      transition: all 0.3s;\r\n      background-color: rgba(255,255,255,0.1);\r\n    }\r\n    \r\n    :hover::after {\r\n      opacity: 0; \r\n      transform: scale(0.1, 1);\r\n    }\r\n  }\r\n`;","import React from 'react';\r\nimport {PreviousDay, PreviousDays, PreviousWrapper} from \"./Previous.styles\";\r\nimport {List, Card} from 'antd';\r\nimport {formatTemperature} from \"../../../../helpers\";\r\n\r\nconst Previous = ({\r\n                    marsWeather,\r\n                    setSelectedSol,\r\n                    isMetric,\r\n                    marsLoading,\r\n                  }) => {\r\n  return (\r\n    <PreviousWrapper>\r\n      <h2 className='previous-title'>Previous 7 days</h2>\r\n      <PreviousDays>\r\n        {marsLoading ? (\r\n            <div>Loading ...</div>\r\n        ) : (\r\n            <List\r\n                grid={{gutter: 12, column: 7}}\r\n                dataSource={marsWeather}\r\n                style={{minWidth: '1000px'}}\r\n                renderItem={item => (\r\n                    <List.Item key={marsWeather.sol}>\r\n                      <PreviousDay>\r\n                        <Card bodyStyle={{padding: 10}}\r\n                              style={{\r\n                                color: '#F4F4F4', border: '1px solid #1E1E1E',\r\n                                borderRadius: 14, backgroundColor: 'rgba(0, 0, 0, 0.6)'\r\n                              }}>\r\n                          <h2 className='previous-day__sol'> {item.sol} </h2>\r\n                          <p className='previous-day__date'> {item.date} </p>\r\n                          <p className='previous-day__temp'>\r\n                            High:\r\n                            <span> {formatTemperature(item.maxTemp, isMetric)}</span>\r\n                            <span> {isMetric ? ' C' : ' F'} </span>\r\n                          </p>\r\n                          <p className='previous-day__temp'>\r\n                            Low:\r\n                            <span> {formatTemperature(item.minTemp, isMetric)} </span>\r\n                            <span> {isMetric ? ' C' : ' F'} </span>\r\n                          </p>\r\n                          <div onClick={() => setSelectedSol(item.itemNumber)}\r\n                               className='previous-day__more-info'>\r\n                            <span>More info</span>\r\n                          </div>\r\n                        </Card>\r\n                      </PreviousDay>\r\n                    </List.Item>\r\n                )}\r\n            />\r\n        )}\r\n      </PreviousDays>\r\n    </PreviousWrapper>\r\n  )\r\n};\r\n\r\nexport default Previous;","import styled from 'styled-components';\r\n\r\nexport const UnitStyles = styled.div`\r\n  color: #fff;\r\n  display: -webkit-box;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  opacity: 0.7;\r\n  transition: opacity 275ms linear;\r\n\r\n  :hover {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nexport const Toggle = styled.button`\r\n  cursor: pointer;\r\n  width: 4em;\r\n  border: 2px solid #fff;\r\n  background: transparent;\r\n  padding: 0;\r\n  border-radius: 100vmax;\r\n  margin: 0 10px;\r\n  outline: 0;\r\n\r\n  ::after {\r\n    content: '';\r\n    display: block;\r\n    background: #fff;\r\n    border-radius: 50%;\r\n    height: 1rem;\r\n    margin: 3px;\r\n    margin-left: ${(props) => (props.metric ? '3px' : 'auto')};\r\n    width: 1rem;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { UnitStyles, Toggle } from './Unit.styles';\r\n\r\nexport const Unit = ({ isMetric, setMetric }) => (\r\n  <UnitStyles>\r\n    <label htmlFor='cel'>°C</label>\r\n    <Toggle metric={isMetric} onClick={() => setMetric((prev) => !prev)} />\r\n    <label htmlFor='fah'>°F</label>\r\n  </UnitStyles>\r\n);\r\n","import styled from 'styled-components';\r\n\r\nexport const WeatherWrapper = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-evenly;\r\n`;\r\n\r\nexport const WeatherItem = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin: 20px 20px 0 20px;\r\n  width: 240px;\r\n  \r\n  .weather-instance-container {\r\n    display: flex;\r\n    margin-bottom: 10px;\r\n  }\r\n  \r\n  .photo {\r\n    width: 160px;\r\n    border: 1px solid #1E1E1E;\r\n    border-radius: 8px;\r\n  }\r\n  \r\n  .photo-description {\r\n    text-align: center;\r\n    margin-top: 10px;\r\n    width: 190px;\r\n    font-size: 0.9rem;\r\n    color: #ADADAD;\r\n  }\r\n`;\r\n\r\nexport const WeatherInstance = styled.div`\r\n  margin: 0 20px;\r\n\r\n  .instance-value {\r\n    font-size: 1.7rem;\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n  \r\n  .instance-description {\r\n    text-align: center;\r\n    font-size: 1.1rem;\r\n    color: #ADADAD;\r\n  }\r\n`;","import React from 'react';\r\nimport {WeatherInstance, WeatherItem, WeatherWrapper} from \"../WeatherData.styles\";\r\nimport { formatTemperature } from '../../../helpers';\r\nimport currentPhoto from '../../../img/context_camera.PNG'\r\nimport {Popover} from \"antd\";\r\nimport {InfoCircleFilled} from '@ant-design/icons';\r\n\r\nconst MarsWeatherData = ({sol, isMetric}) => (\r\n  <WeatherWrapper>\r\n    <WeatherItem>\r\n      <div className='weather-instance-container'>\r\n        <WeatherInstance>\r\n          <div className='instance-value'>\r\n            {formatTemperature(sol.maxTemp, isMetric)}\r\n            <span> {isMetric ? ' °C' : ' °F'} </span>\r\n          </div>\r\n          <div className='instance-description'>High</div>\r\n        </WeatherInstance>\r\n        <WeatherInstance>\r\n          <div className='instance-value'>\r\n            {formatTemperature(sol.minTemp, isMetric)}\r\n            <span> {isMetric ? ' °C' : ' °F'} </span>\r\n          </div>\r\n          <div className='instance-description'>Low</div>\r\n        </WeatherInstance>\r\n      </div>\r\n        <WeatherInstance>\r\n          <div className='instance-value'>{sol.windSpeed === 'No data' ? 'No data'\r\n                                                                       : `${sol.windSpeed} mph`}</div>\r\n          <div className='instance-description'>Wind</div>\r\n        </WeatherInstance>\r\n    </WeatherItem>\r\n\r\n    <WeatherItem>\r\n      <img className='photo' src={currentPhoto} alt=\"current\"/>\r\n      <div className='photo-description'>\r\n        Lander-mounted, Instrument Context Camera (ICC)\r\n        <Popover\r\n          overlayStyle={{maxWidth: 220}}\r\n          content={`NASA's InSight Mars lander acquired this image in front of the lander on ${sol.date}`}\r\n          trigger=\"hover\">\r\n          <InfoCircleFilled style={{fontSize: 20, marginLeft: 5, color: '#fff'}}/>\r\n        </Popover>\r\n      </div>\r\n    </WeatherItem>\r\n  </WeatherWrapper>\r\n);\r\n\r\nexport default MarsWeatherData;","import {Unit} from \"./Unit/Unit\";\r\nimport MarsWeatherData from \"./MarsWeatherData\";\r\nimport React from \"react\";\r\n\r\nexport const MarsWeather = ({marsWeather, isMetric, marsLoading, setMetric, selectedSol}) => {\r\n  return (\r\n    marsLoading ? (\r\n        <div>Loading ...</div>\r\n    ) : (\r\n        <>\r\n          <h1 className='weather-title'> Latest weather at\r\n            <span className='weather-title__location'> Elysium Plantitia</span>\r\n          </h1>\r\n          <div className='weather-date'>\r\n            <div>\r\n              <h2>\r\n                {marsWeather[selectedSol].sol || 'sol'}<span> (day on Mars)</span>\r\n              </h2>\r\n              <p>{marsWeather[selectedSol].date || 'date'}</p>\r\n            </div>\r\n            <div className='unit-container'>\r\n              <Unit isMetric={isMetric} setMetric={setMetric}/>\r\n            </div>\r\n          </div>\r\n          <MarsWeatherData sol={marsWeather[selectedSol]} isMetric={isMetric}/>\r\n        </>\r\n    )\r\n  )\r\n}","import React from \"react\";\r\nimport {WeatherInstance, WeatherItem, WeatherWrapper} from \"../WeatherData.styles\";\r\n\r\nexport const EarthWeatherData = ({earthWeather}) => {\r\n  const {temp, humidity, pressure} = earthWeather\r\n\r\n  return (\r\n      <WeatherWrapper>\r\n        <WeatherItem>\r\n          <div className='weather-instance-container'>\r\n            <WeatherInstance>\r\n              <div className='instance-value'>{Math.round(temp)} °C</div>\r\n              <div className='instance-description'>Temp</div>\r\n            </WeatherInstance>\r\n            <WeatherInstance>\r\n              <div className='instance-value'>{humidity} %</div>\r\n              <div className='instance-description'>Humidity</div>\r\n            </WeatherInstance>\r\n          </div>\r\n          <WeatherInstance>\r\n            <div className='instance-value'>{pressure} hPa</div>\r\n            <div className='instance-description'>Pressure</div>\r\n          </WeatherInstance>\r\n        </WeatherItem>\r\n      </WeatherWrapper>\r\n  )\r\n}","import React from \"react\";\r\nimport {Input} from 'antd';\r\nimport {EarthWeatherData} from \"./EarthWeatherData\";\r\n\r\nexport const EarthWeather = ({fetchEarthData, earthWeather, city, error}) => {\r\n  const {Search} = Input;\r\n\r\n  return (\r\n    <>\r\n      <h1 className='weather-title'>\r\n        {earthWeather == null ? 'Enter the name of the city to get started!'\r\n                              : <>Current weather in <span className='weather-title__location'>{city}</span></>\r\n        }\r\n      </h1>\r\n      <div className='search-container'>\r\n        <Search\r\n            onSearch={city => fetchEarthData(city)}\r\n            style={{maxWidth: 400, borderRadius: 10}}\r\n            size=\"large\"\r\n        />\r\n        {error !== null && <p>{error}</p>}\r\n      </div>\r\n      {earthWeather !== null && <EarthWeatherData earthWeather={earthWeather}/>}\r\n    </>\r\n  )\r\n}","import React, {useEffect, useState} from 'react';\r\nimport axios from \"axios\";\r\nimport {GlobalStyle, AppWrapper, WeatherBlock} from './App.styles';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport {marsTheme, earthTheme} from './theme';\r\nimport MarsBGImage from './img/mars.jpg';\r\nimport EarthBGImage from './img/earth.jpg';\r\n\r\nimport {formatDate} from \"./helpers\";\r\nimport {TogglePlanet} from \"./components/TogglePlanet/TogglePlanet\";\r\nimport Previous from \"./components/Weather/MarsWeather/Previous/Previous\";\r\nimport {MarsWeather} from \"./components/Weather/MarsWeather/MarsWeather\";\r\nimport {EarthWeather} from \"./components/Weather/EarthWeather/EarthWeather\";\r\n\r\nconst App = () => {\r\n  const [planet, setPlanet] = useState('Mars');\r\n\r\n  // Mars\r\n  const [marsWeather, setMarsWeather] = useState([]);\r\n  const [marsLoading, setMarsLoading] = useState(true);\r\n  const [isMetric, setMetric] = useState(true);\r\n  const [selectedSol, setSelectedSol] = useState(); // \"Sol\" is a Mars solar day\r\n\r\n  const fetchMarsData = async () => {\r\n    const url = 'https://api.nasa.gov/insight_weather/' +\r\n        '?api_key=tCe59kbvnGzFzWrvO4ufe1e8g748WbgiR9e5Wr2B&feedtype=json&ver=1.0';\r\n    const request = axios.get(url);\r\n    const response = await request;\r\n    const marsWeather = response.data.sol_keys.map((solKey, i) => {\r\n      return {\r\n        sol: solKey,\r\n        maxTemp: response.data[solKey].AT?.mx || 'No data',\r\n        minTemp: response.data[solKey].AT?.mn || 'No data',\r\n        windSpeed: response.data[solKey].HWS && response.data[solKey].HWS.av\r\n            ? Math.round(response.data[solKey].HWS.av) : 'No data',\r\n        date: formatDate(new Date(response.data[solKey].First_UTC)),\r\n        itemNumber: i,\r\n      };\r\n    });\r\n    setMarsWeather(marsWeather);\r\n    setSelectedSol(marsWeather.length - 1);\r\n    setMarsLoading(false);\r\n  };\r\n\r\n  // Earth\r\n  const [earthWeather, setEarthWeather] = useState(null);\r\n  const [city, setCity] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchEarthData = async city => {\r\n    if (!city) {\r\n      return setError(\"Please enter the name of the city\"), setEarthWeather(null);\r\n    }\r\n    const url = `https://api.openweathermap.org/data/2.5/` +\r\n        `weather?q=${city}&appid=3d210771b356ac5fbc2fd51f7a263aa2&units=metric`;\r\n    const request = axios.get(url);\r\n    const response = await request;\r\n    setError(null);\r\n    setEarthWeather(response.data.main);\r\n    setCity(response.data.name);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchMarsData();\r\n  }, []);\r\n\r\n  return (\r\n    <ThemeProvider theme={planet === 'Mars' ? marsTheme : earthTheme}>\r\n      <>\r\n        <GlobalStyle imageUrl={planet === 'Mars' ? MarsBGImage : EarthBGImage}/>\r\n        <img src={MarsBGImage} alt={'#'} className='preloadImage'/>\r\n        <img src={EarthBGImage} alt={'#'} className='preloadImage'/>\r\n        <AppWrapper>\r\n          <div className='content-container'>\r\n            <TogglePlanet planet={planet} setPlanet={setPlanet}/>\r\n            <WeatherBlock>\r\n              {planet === 'Mars'\r\n                  ? <MarsWeather marsWeather={marsWeather}\r\n                                 isMetric={isMetric}\r\n                                 marsLoading={marsLoading}\r\n                                 setMetric={setMetric}\r\n                                 selectedSol={selectedSol}/>\r\n                  : <EarthWeather fetchEarthData={fetchEarthData}\r\n                                  earthWeather={earthWeather}\r\n                                  city={city}\r\n                                  error={error}/>\r\n              }\r\n            </WeatherBlock>\r\n          </div>\r\n          {planet === 'Mars' &&\r\n          <Previous marsWeather={marsWeather}\r\n                    setSelectedSol={setSelectedSol}\r\n                    isMetric={isMetric}\r\n                    marsLoading={marsLoading}\r\n          />}\r\n        </AppWrapper>\r\n      </>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'antd/dist/antd.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/mars.0d4cbc41.jpg\";","module.exports = __webpack_public_path__ + \"static/media/earth.464a0c64.jpg\";"],"sourceRoot":""}